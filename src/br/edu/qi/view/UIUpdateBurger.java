/*
 * The MIT License
 *
 * Copyright 2019 Brian & Willian.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package br.edu.qi.view;

import br.edu.qi.interfaces.DialogListener;
import br.edu.qi.model.BurgerVO;
import br.edu.qi.services.BurgerServices;
import br.edu.qi.services.ServicesFactory;
import br.edu.qi.util.Utilities;
import java.awt.Color;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.border.Border;

/**
 *
 * @author Brian & Willian
 * @since 10/06/19 - 10:13
 * @version 1.0
 */
public class UIUpdateBurger extends javax.swing.JDialog {

    private final Border defaultBorder;
    private final Border goodBorder = BorderFactory.createLineBorder(Color.decode("#00e038"));
    private final Border evilBorder = BorderFactory.createLineBorder(Color.decode("#e21a0f").brighter());

    private BurgerVO burgerVO;

    private DialogListener dialogListener;

    /**
     * Creates new form UIUpdateBurger
     */
    public UIUpdateBurger(java.awt.Frame parent, boolean modal, BurgerVO burgerVO, DialogListener dialogListener) {
        super(parent, modal);
        initComponents();
        this.defaultBorder = jtName.getBorder();
        this.burgerVO = burgerVO;
        this.dialogListener = dialogListener;
        jtID.setText(Long.toString(burgerVO.getIDBurger()));
        jtName.setText(burgerVO.getName());
        jtDescription.setText(burgerVO.getDescription());
        jtPrice.setText(Utilities.convertDotToComma(Double.toString(burgerVO.getPrice())));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jlpData = new javax.swing.JLayeredPane();
        jlID = new javax.swing.JLabel();
        jlName = new javax.swing.JLabel();
        jlDescription = new javax.swing.JLabel();
        jlPrice = new javax.swing.JLabel();
        jtID = new javax.swing.JTextField();
        jtName = new javax.swing.JTextField();
        jtPrice = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtDescription = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jlpActions = new javax.swing.JLayeredPane();
        jbUpdate = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jlpData.setBorder(new javax.swing.border.MatteBorder(null));

        jlID.setText("ID");

        jlName.setText("Name");

        jlDescription.setText("Description");

        jlPrice.setText("Price");

        jtID.setEditable(false);

        jtName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtNameFocusLost(evt);
            }
        });

        jtPrice.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtPriceFocusLost(evt);
            }
        });

        jLabel1.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/br/edu/qi/assets/burger_icon.png"))); // NOI18N
        jLabel1.setEnabled(false);

        jtDescription.setColumns(20);
        jtDescription.setRows(5);
        jtDescription.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtDescriptionFocusLost(evt);
            }
        });
        jScrollPane1.setViewportView(jtDescription);

        jLabel2.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/br/edu/qi/assets/description_icon.png"))); // NOI18N
        jLabel2.setEnabled(false);

        jLabel3.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/br/edu/qi/assets/money_icon.png"))); // NOI18N
        jLabel3.setEnabled(false);

        jLabel4.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/br/edu/qi/assets/id_icon.png"))); // NOI18N
        jLabel4.setEnabled(false);

        jlpData.setLayer(jlID, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jlpData.setLayer(jlName, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jlpData.setLayer(jlDescription, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jlpData.setLayer(jlPrice, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jlpData.setLayer(jtID, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jlpData.setLayer(jtName, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jlpData.setLayer(jtPrice, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jlpData.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jlpData.setLayer(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jlpData.setLayer(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jlpData.setLayer(jLabel3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jlpData.setLayer(jLabel4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jlpDataLayout = new javax.swing.GroupLayout(jlpData);
        jlpData.setLayout(jlpDataLayout);
        jlpDataLayout.setHorizontalGroup(
            jlpDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jlpDataLayout.createSequentialGroup()
                .addContainerGap(60, Short.MAX_VALUE)
                .addGroup(jlpDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jlpDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jlpDataLayout.createSequentialGroup()
                        .addComponent(jlPrice)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                        .addComponent(jtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jlpDataLayout.createSequentialGroup()
                        .addGroup(jlpDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlName)
                            .addComponent(jlDescription)
                            .addComponent(jlID))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jlpDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jtName, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)
                            .addComponent(jtID, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)
                            .addComponent(jScrollPane1))))
                .addGap(35, 35, 35))
        );
        jlpDataLayout.setVerticalGroup(
            jlpDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jlpDataLayout.createSequentialGroup()
                .addGroup(jlpDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jlpDataLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(jlpDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jlID)
                            .addComponent(jtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(49, 49, 49))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jlpDataLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)))
                .addGroup(jlpDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlName)
                    .addComponent(jtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGroup(jlpDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jlpDataLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jlpDataLayout.createSequentialGroup()
                        .addGroup(jlpDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jlpDataLayout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addComponent(jlDescription))
                            .addGroup(jlpDataLayout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(jlpDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jlpDataLayout.createSequentialGroup()
                        .addGroup(jlpDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jlPrice)
                            .addComponent(jtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jlpDataLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(40, 40, 40))))
        );

        jlpActions.setBorder(new javax.swing.border.MatteBorder(null));

        jbUpdate.setText("Update");
        jbUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbUpdateActionPerformed(evt);
            }
        });

        jbCancel.setText("Cancel");
        jbCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelActionPerformed(evt);
            }
        });

        jlpActions.setLayer(jbUpdate, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jlpActions.setLayer(jbCancel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jlpActionsLayout = new javax.swing.GroupLayout(jlpActions);
        jlpActions.setLayout(jlpActionsLayout);
        jlpActionsLayout.setHorizontalGroup(
            jlpActionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jlpActionsLayout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(jbUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbCancel)
                .addGap(83, 83, 83))
        );

        jlpActionsLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jbCancel, jbUpdate});

        jlpActionsLayout.setVerticalGroup(
            jlpActionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jlpActionsLayout.createSequentialGroup()
                .addContainerGap(33, Short.MAX_VALUE)
                .addGroup(jlpActionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbCancel))
                .addGap(29, 29, 29))
        );

        jlpActionsLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jbCancel, jbUpdate});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlpData)
                    .addComponent(jlpActions))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlpData)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jlpActions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void update() {
        try {
            if (!Utilities.validateName(jtName.getText())) {
                jtName.grabFocus();
                throw new IllegalStateException("Name is not well written.");
            }
            if (!Utilities.validateBigTexts(jtDescription.getText())) {
                jtDescription.grabFocus();
                throw new IllegalStateException("Please, write the description correctly.");
            }
            if (!Utilities.validatePrice(jtPrice.getText())) {
                jtPrice.grabFocus();
                throw new IllegalStateException("Please, write the price correctly.");
            }

            this.burgerVO.setName(jtName.getText());
            this.burgerVO.setDescription(jtDescription.getText());
            this.burgerVO.setPrice(Double.parseDouble(Utilities.convertCommaToDot(jtPrice.getText())));
            BurgerServices burgerServices = ServicesFactory.getBURGER_SERVICES();
            burgerServices.updateBurger(burgerVO);
            JOptionPane.showMessageDialog(
                    this,
                    "Burger updated.",
                    "Success",
                    JOptionPane.INFORMATION_MESSAGE
            );
            dialogListener.closeJDialog(this);
        } catch (IllegalStateException e) {
            JOptionPane.showMessageDialog(
                    this,
                    e.getMessage(),
                    "Warning",
                    JOptionPane.WARNING_MESSAGE
            );
        } catch (Exception e) {
            JOptionPane.showMessageDialog(
                    this,
                    "Error: " + e.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }

    }

    private void cancel() {
        dispose();
    }

    private void jbUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbUpdateActionPerformed
        update();
    }//GEN-LAST:event_jbUpdateActionPerformed

    private void jbCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelActionPerformed
        cancel();
    }//GEN-LAST:event_jbCancelActionPerformed

    private void jtNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtNameFocusLost
        if (Utilities.validateName(jtName.getText())) {
            jtName.setBorder(goodBorder);
            return;
        }
        jtName.setBorder(evilBorder);
    }//GEN-LAST:event_jtNameFocusLost

    private void jtDescriptionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtDescriptionFocusLost
        if (Utilities.validateBigTexts(jtDescription.getText())) {
            jtDescription.setBorder(goodBorder);
            return;
        }
        jtDescription.setBorder(evilBorder);
    }//GEN-LAST:event_jtDescriptionFocusLost

    private void jtPriceFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtPriceFocusLost
        if (Utilities.validatePrice(jtPrice.getText())) {
            jtPrice.setBorder(goodBorder);
            return;
        }
        jtPrice.setBorder(evilBorder);
    }//GEN-LAST:event_jtPriceFocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UIUpdateBurger.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UIUpdateBurger.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UIUpdateBurger.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UIUpdateBurger.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                UIUpdateBurger dialog = new UIUpdateBurger(new javax.swing.JFrame(), true, null, null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbUpdate;
    private javax.swing.JLabel jlDescription;
    private javax.swing.JLabel jlID;
    private javax.swing.JLabel jlName;
    private javax.swing.JLabel jlPrice;
    private javax.swing.JLayeredPane jlpActions;
    private javax.swing.JLayeredPane jlpData;
    private javax.swing.JTextArea jtDescription;
    private javax.swing.JTextField jtID;
    private javax.swing.JTextField jtName;
    private javax.swing.JTextField jtPrice;
    // End of variables declaration//GEN-END:variables
}
